<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
              xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans  
http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
http://www.springframework.org/schema/context  
http://www.springframework.org/schema/context/spring-context-3.2.xsd">
 
	
	<context:annotation-config />
	<context:component-scan base-package="com.cpf" />
	<!-- <tx:annotation-driven /> -->
	
	<bean id="propertyConfigurer"    class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	    <property name="locations">
	        <list>
	            <value>classpath:db.properties</value>
	            <value>classpath:redis.properties</value>  
	        </list>
	    </property>
	</bean> 
   
	<bean id="abstractDataSource" class="com.alibaba.druid.pool.DruidDataSource"  init-method="init" destroy-method="close"> 
		  <property name="driverClassName" value="${mysql.driver}" /> 
		  <property name="url" value="${mysql.jdbc}" /> 
		  <property name="username" value="${mysql.user}" /> 
		  <property name="password" value="${mysql.password}" /> 
		  <!-- 配置初始化大小、最小、最大 --> 
		  <property name="initialSize" value="5" /> 
		  <property name="minIdle" value="10" /> 
		  <property name="maxActive" value="100" />
		  <!-- 配置获取连接等待超时的时间 --> 
		  <property name="maxWait" value="10000" />
		  <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --> 
		  <property name="timeBetweenEvictionRunsMillis" value="60000" />
		  <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --> 
		  <property name="minEvictableIdleTimeMillis" value="300000" />
		  <property name="testWhileIdle" value="true" />
		  <!-- 这里建议配置为TRUE，防止取到的连接不可用 --> 
		  <property name="testOnBorrow" value="true" /> 
		  <property name="testOnReturn" value="false" />
		  <!-- 打开PSCache，并且指定每个连接上PSCache的大小 --> 
		  <property name="poolPreparedStatements" value="true" /> 
		  <property name="maxPoolPreparedStatementPerConnectionSize" 		   value="20" />
		  <!-- 这里配置提交方式，默认就是TRUE，可以不用配置 -->
		  <property name="defaultAutoCommit" value="true" />
		  <!-- 验证连接有效与否的SQL，不同的数据配置不同 select 1 --> 
		  <property name="validationQuery" value="select 1 " /> 
		  <property name="filters" value="stat" /> 
    </bean>
 	<bean id="dataSourceRead"  parent="abstractDataSource">
             <property name="username" value="${mysql.user}"/>
             <property name="password" value="${mysql.password}"/>
    </bean>

    <bean id="dataSourceWrite"  parent="abstractDataSource">
             <property name="username" value="${mysql.user}"/>
             <property name="password" value="${mysql.password}"/>
    </bean>

    <bean id="dataSource"  class="com.cpf.datasource.DynamicDataSource">
             <property name="writeDataSource"  ref="dataSourceWrite"></property>
             <property name="readDataSource" ref="dataSourceRead"></property>
    </bean>
       
       
	<bean id="sqlSessionFactoryNew" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="com.cpf.beans.*.*" />
		<property name="mapperLocations"
			value="classpath:/com/cpf/mapper/**/*.xml" />
	    <property name="plugins">
                  <array>
                         <bean class="com.cpf.datasource.DynamicPlugin" />
                  </array>
         </property>
	</bean>
	
	<!-- 数据库的事务管理器配置 -->
	<bean id="transactionManager"	class="com.cpf.datasource.DynamicDataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	 <!-- 配置扫描器 -->
	<bean name="middlemap" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.cpf.dao,com.cpf.mapper.*" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryNew" />
	</bean>
	<!-- 使用annotation定义数据库事务，这样可以在类或方法中直接使用@Transactional注解来声明事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" /> 
	
	<!-- 利用AOP,实现对Service的声明式事务管理 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			
			<!-- 删除，更新，添加事务配置-->
			<tx:method name="delete*" propagation="REQUIRED" isolation="READ_COMMITTED" rollback-for="Exception"
				timeout="-1"  />
			<tx:method name="insert*" propagation="REQUIRED" isolation="READ_COMMITTED" rollback-for="Exception"
				timeout="-1"   />
			<tx:method name="update*" propagation="REQUIRED" isolation="READ_COMMITTED" rollback-for="Exception"
				timeout="-1"    />
			<tx:method name="add*" propagation="REQUIRED" isolation="READ_COMMITTED" rollback-for="Exception"
				timeout="-1"   /> 
			<!-- 其他默认-->
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice> 

 <aop:config>
		<aop:pointcut id="servicepointcut"
			expression="execution(* com.cpf.service.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="servicepointcut" />
	</aop:config> 
	 
	 
	
	<import resource="spring-mvc.xml" />
	<import resource="spring-redis.xml" />
</beans>