<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
<log4j:configuration xmlns:log4j='http://jakarta.apache.org/log4j/'>
<!-- 
-X号: X信息输出时左对齐；  
%p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,  
%d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921  
%r: 输出自应用启动到输出该log信息耗费的毫秒数  
%c: 输出日志信息所属的类目，通常就是所在类的全名  
%t: 输出产生该日志事件的线程名  
%l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main (TestLog4.java:10)  
%x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。  
%%: 输出一个"%"字符  
%F: 输出日志消息产生时所在的文件名称  
%L: 输出代码中的行号  
%m: 输出代码中指定的消息,产生的日志具体信息  
%n: 输出一个回车换行符，Windows平台为"/r/n"，Unix平台为"/n"输出日志信息换行  
可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如：  
1)%20c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。  
2)%-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，"-"号指定左对齐。  
3)%.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。  
4)%20.30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边较远输出的字符截掉。
 -->
	<!-- 输出日志到控制台 ConsoleAppender -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss\} %-5p] %l %m%n" />
		</layout> <!--限制输出级别 -->
		<filter class="org.apache.log4j.varia.LevelRangeFilter">
			<param name="LevelMax" value="ERROR" />
			<param name="LevelMin" value="DEBUG" />
		</filter>
	</appender>

	<!-- 输出日志到文件 每天一个文件 
	<appender name="dailyRollingFile" class="org.apache.log4j.DailyRollingFileAppender">
		<param name="Threshold" value="info"></param>
		<param name="encoding" value="UTF-8" />

		<param name="ImmediateFlush" value="true"></param>
		<param name="File" value="${webapp.root}/logs/dailyRollingFile.log"></param>
		<param name="DatePattern" value="'.'yyyy-MM-dd'.log'"></param>
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss\} %-5p] {%l} %m%n"></param>
		</layout>
	</appender>
-->
	<!-- 输出日志到文件 文件大小到达指定尺寸的时候产生一个新的文件 
	<appender name="railyFile" class="org.apache.log4j.RollingFileAppender">
		<param name="File" value="${webapp.root}logs/railyFile.log"></param>
		<param name="ImmediateFlush" value="true" />
		<param name="Threshold" value="info"></param>
		<param name="encoding" value="UTF-8" />

		<param name="Append" value="true"></param>
		<param name="MaxFileSize" value="30KB"></param>
		<param name="MaxBackupIndex" value="100"></param>
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss\} %-5p] [%t] {%c:%L}-%m%n"></param>
		</layout>
	</appender>
-->
	<!-- 输出日志到文件 
	<appender name="file" class="org.apache.log4j.FileAppender">
		<param name="File" value="${webapp.root}/logs/file.log"></param>
		<param name="Threshold" value="info"></param>
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss\} %-5p] [%t] {%c:%L}-%m%n"></param>
		</layout>
	</appender>-->
<!-- 过滤掉 烦人的springframework 启动扫描等信息 -->
      <logger name="org.apache" >
        <level value="warn" />
        <appender-ref ref="console" />
      </logger>
      <logger name="com.mchange" >
        <level value="warn" />
        <appender-ref ref="console" />
      </logger>
      <logger name="org.springframework" >
        <level value="warn" />
        <appender-ref ref="console" />
      </logger>
      
	<!-- 定义全局的日志输出级别,但是在输出目的地的配置中配置的具体输出级别优先级高于全局定义的优先级。 如果在railyFile中定义<param 
		name="Threshold" value="info"></param>，那么将会把info以上级别的信息输出 -->
	<root>
		<priority value="debug" />
		<appender-ref ref="console" />
		<!--  <appender-ref ref="dailyRollingFile" />
		<appender-ref ref="railyFile" />
		<appender-ref ref="file" />-->
	</root>

</log4j:configuration>